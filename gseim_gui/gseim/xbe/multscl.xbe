xbe name=multscl evaluate=yes
# y = k*x
Jacobian: constant
input_vars: x
output_vars: y
aux_vars:
iparms:
sparms:
rparms:
+  k=1
stparms:
igparms:
outparms: x y
n_f= 0
n_g= 1
g_1: x y
C:
prototypes:
variables:
source:
   k = X.rprm[nr_k];
   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_y] = k*X.val_vr[nvr_x];
     return;
   }
   if (G.flags[G.i_trns] || G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = k*X.val_vr[nvr_x];
//     cout << "multscl.xbe: x = " << X.val_vr[nvr_x]
//      << " y = " << X.val_vr[nvr_y] << endl;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y] - k*X.val_vr[nvr_x];
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
         J.dgdvr[ng_1][nvr_x] = -k;
       }
     }
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_x] = X.val_vr[nvr_x];
     X.outprm[no_y] = X.val_vr[nvr_y];
     return;
   }
endC
endxbe
