# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
xbe name=clock_3 evaluate=yes limit_tstep=yes
Jacobian: constant
input_vars:
output_vars: y
aux_vars:
iparms: indx=1
sparms:
rparms:
+  alpha=10
+  beta=0
+  T=0.02
+  y_high=1
+  delta1=0.01
+  delta2=0.01
+  T1=0
+  T2=0
+  t0=0
+  L1=0
+  L2=0
+  L0=0
+  tk1=0
+  tk2=0
+  tk3=0
+  tk4=0
+  tk5=0
+  slope1=0
+  slope2=0
+  epsl=0
stparms:
igparms:
outparms: y
n_f= 0
n_g= 1
g_1: y
# inputs: alpha,beta,indx,T,y_high,delta1,delta2
# L1 is the level in the first interval, L2 in the second, they
# are computed, depending on indx.
C:
prototypes:
variables:
   double y0,t0_new,delta_min,del1,del2,t_a,t_b,tnext_p;
   double t10,t20,t30,t40;
   int n;
source:
   if (G.flags[G.i_one_time_parms]) {
     y_high = X.rprm[nr_y_high];
     if (y_high < 1.0) {
       cout << "clock_3: y_high < 1.0? Halting..." << endl; exit(1);
     }

     T     = X.rprm[nr_T    ];
     alpha = X.rprm[nr_alpha];
     beta  = X.rprm[nr_beta ];

     delta1 = X.rprm[nr_delta1];
     delta2 = X.rprm[nr_delta2];

     t10 = ((180.0-2*alpha)/360.0)*T;
     t20 = T-t10;
     t30 = (alpha/360.0)*T;
     t40 = (beta/360.0)*T;
     epsl = min(delta1,delta2)/100.0;

     indx = X.iprm[ni_indx];

     if (indx == 1) {
       T1 = t10;
       T2 = t20;
       t0 = t30+t40;
       L1 = y_high; L2 = 0.0;
     } else if (indx == 2) {
       T1 = t10;
       T2 = t20;
       t0 = t30+t40;
       L1 = 0.0; L2 = y_high;
     } else if (indx == 3) {
       T1 = t10;
       T2 = t20;
       t0 = t30+t40+(0.5*T);
       L1 = y_high; L2 = 0.0;
     } else if (indx == 4) {
       T1 = t10;
       T2 = t20;
       t0 = t30+t40+(0.5*T);
       L1 = 0.0; L2 = y_high;
     } else {
       cout << "clock_3: wrong indx value: " << indx << endl;
       cout << "  Halting..." << endl; exit(1);
     }
     delta_min = 0.1*min(delta1,delta2);
     del1 = T1-0.5*(delta1+delta2);
     del2 = T2-0.5*(delta1+delta2);

     if (del1 < delta_min) {
       cout << "clock.xbe: T1 is too small. Check delta1, delta2. Halting..." << endl; exit(1);
     }
     if (del2 < delta_min) {
       cout << "clock.xbe: T2 is too small. Check delta1, delta2. Halting..." << endl; exit(1);
     }
     tk1 = 0.5*delta1;
     tk2 = T1 - 0.5*delta2;
     tk3 = T1 + 0.5*delta2;
     tk4 = T  - 0.5*delta1;
     tk5 = T  + 0.5*delta1;

     slope1 = (L1-L2)/delta1;
     slope2 = (L2-L1)/delta2;
     epsl = min(delta1,delta2)/10.0;
     L0 = 0.5*(L1+L2);

     X.rprm[nr_T1] = T1;
     X.rprm[nr_T2] = T2;
     X.rprm[nr_L1] = L1;
     X.rprm[nr_L2] = L2;
     X.rprm[nr_t0] = t0;
     X.rprm[nr_tk1] = tk1;
     X.rprm[nr_tk2] = tk2;
     X.rprm[nr_tk3] = tk3;
     X.rprm[nr_tk4] = tk4;
     X.rprm[nr_tk5] = tk5;
     X.rprm[nr_slope1] = slope1;
     X.rprm[nr_slope2] = slope2;
     X.rprm[nr_epsl] = epsl;
     X.rprm[nr_L0] = L0;

     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_y] = X.val_vr[nvr_y];
     return;
   }

   t0   = X.rprm[nr_t0  ];
   T    = X.rprm[nr_T   ];
   epsl = X.rprm[nr_epsl];
   tk1  = X.rprm[nr_tk1 ];
   tk2  = X.rprm[nr_tk2 ];
   tk3  = X.rprm[nr_tk3 ];
   tk4  = X.rprm[nr_tk4 ];
   tk5  = X.rprm[nr_tk5 ];

   if (G.time_given_x < t0) {
     n = ((t0-G.time_given_x)/T) + 1;
     t0_new = t0-n*T;
   } else {
     t0_new = t0;
   }
   t_a = G.time_given_x-t0_new;
   t_b = fmod(t_a,T);

   if (abs(t_b-T) < epsl) t_b = 0.0;

   if (G.flags[G.i_next_time]) {
     if (t_b < tk1) {
       tnext_p = tk1;
     } else if (t_b < tk2) {
       tnext_p = tk2;
     } else if (t_b < tk3) {
       tnext_p = tk3;
     } else if (t_b < tk4) {
       tnext_p = tk4;
     } else {
       tnext_p = tk5;
     }
     G.time_nextbreak_x = G.time_given_x + (tnext_p-t_b);
     return;
   }
   L0 = X.rprm[nr_L0];
   L1 = X.rprm[nr_L1];
   L2 = X.rprm[nr_L2];
   slope1 = X.rprm[nr_slope1];
   slope2 = X.rprm[nr_slope2];

   if (t_b < tk1) {
     y0 = L0 + slope1*t_b;
   } else if (t_b < tk2) {
     y0 = L1;
   } else if (t_b < tk3) {
     y0 = L1 + slope2*(t_b-tk2);
   } else if (t_b < tk4) {
     y0 = L2;
   } else {
     y0 = L2 + slope1*(t_b-tk4);
   }

   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_y] = y0;
     return;
   }
   if (G.flags[G.i_trns] || G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = y0;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y] - y0;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }
     }
     return;
   }
endC
endxbe
