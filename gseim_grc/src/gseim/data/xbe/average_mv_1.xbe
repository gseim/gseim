# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
xbe name=average_mv_1 evaluate=yes limit_tstep=yes save_history=yes allow_ssw=no
#
# compute average value of x between active edges of clk.
#
Jacobian: variable
input_vars: clk x
output_vars: y
aux_vars:
iparms:
+  active_pos_edge=1
+  active_neg_edge=0
sparms:
rparms:
+  clk_high=1
+  dt=0.1u
+  clk_cross=0
+  clk_prev=0
+  t_lapsed=0
+  x_sum=0
+  t_prev=0
+  x_prev=0
+  y0=0
stparms:
igparms:
outparms: clk x y
n_f= 0
n_g= 1
g_1: y
C:
prototypes:
variables:
   int flag_active_edge;
   double time0,delt,delx_sum;
source:
   if (G.flags[G.i_one_time_parms]) {
     active_pos_edge = X.iprm[ni_active_pos_edge];
     active_neg_edge = X.iprm[ni_active_neg_edge];

     if (active_pos_edge == 0) {
       if (active_neg_edge == 0) {
         cout << "average_mv_1.xbe: one of pos/neg edge must be 1. Halting..." << endl;
         exit(1);
       }
     } else {
       if (active_neg_edge != 0) {
         cout << "average_mv_1.xbe: only one of pos/neg edge must be 1. Halting..." << endl;
         exit(1);
       }
     }
     clk_high = X.rprm[nr_clk_high];

     if (clk_high < 0.0) {
       cout << "average_mv_1.xbe: check clk_high. Halting..." << endl;
       exit(1);
     }

     clk_cross = 0.5*clk_high;
     X.rprm[nr_clk_cross] = clk_cross;

     X.rprm[nr_clk_prev] = 0.0;
     X.rprm[nr_t_lapsed] = 0.0;
     X.rprm[nr_x_sum   ] = 0.0;
     X.rprm[nr_t_prev  ] = 0.0;
     X.rprm[nr_x_prev  ] = 0.0;
     X.rprm[nr_y0      ] = 0.0;
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_x  ] = X.val_vr[nvr_x  ];
     X.outprm[no_y  ] = X.val_vr[nvr_y  ];
     X.outprm[no_clk] = X.val_vr[nvr_clk];
     return;
   }
   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_y] = 0.0;
     return;
   }
   if (G.flags[G.i_next_time]) {
     time0 = G.time_given_x;

     active_pos_edge = X.iprm[ni_active_pos_edge];

     clk_prev  = X.rprm[nr_clk_prev ];
     clk_cross = X.rprm[nr_clk_cross];

     clk = X.val_vr[nvr_clk];

     if (active_pos_edge == 1) {
       if ((clk_prev <= clk_cross) && (clk >= clk_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     } else {
       if ((clk_prev >= clk_cross) && (clk <= clk_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     }
     if (flag_active_edge == 1) {
       G.time_nextbreak_x = time0 + X.rprm[nr_dt];
     } else {
       G.time_nextbreak_x = G.time_end;
     }
     return;
   }
   if (G.flags[G.i_save_history]) {
     time0 = G.time_given_x;
     active_pos_edge = X.iprm[ni_active_pos_edge];

     clk_prev  = X.rprm[nr_clk_prev ];
     clk_cross = X.rprm[nr_clk_cross];

     clk = X.val_vr[nvr_clk];

     if (active_pos_edge == 1) {
       if ((clk_prev <= clk_cross) && (clk >= clk_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     } else {
       if ((clk_prev >= clk_cross) && (clk <= clk_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     }
     t_prev = X.rprm[nr_t_prev];
     x_prev = X.rprm[nr_x_prev];
     delt = time0-t_prev;
     delx_sum = 0.5*delt*(X.val_vr[nvr_x]+x_prev);

     if (flag_active_edge == 1) {
       t_lapsed = X.rprm[nr_t_lapsed];
       x_sum = X.rprm[nr_x_sum] + delx_sum;
       if (t_lapsed > 1.0e-10) {
         X.rprm[nr_y0] = x_sum/t_lapsed;
       }
       X.rprm[nr_t_lapsed] = 0.0;
       X.rprm[nr_x_sum   ] = 0.0;
     } else {
       X.rprm[nr_t_lapsed] += delt;
       X.rprm[nr_x_sum   ] += delx_sum;
     }
     X.rprm[nr_clk_prev] = clk;
     X.rprm[nr_t_prev  ] = time0;
     X.rprm[nr_x_prev  ] = X.val_vr[nvr_x];

     return;
   }
   if (G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = 0.0;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y];
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }
     }
     return;
   }
   if (G.flags[G.i_trns]) {
     y0 = X.rprm[nr_y0];
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = y0;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y] - y0;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }
     }
   }
endC
endxbe
