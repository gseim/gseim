xbe name=cmpr_simple_2_2 evaluate=yes
# if x1 > x2, y1 = high, else low
# (reverse if flag_inverting=1)
# y2 = not(y1)
Jacobian: variable
input_vars: x1 x2
output_vars: y1 y2
aux_vars:
iparms: flag_invert=0
sparms:
rparms:
+  y_low=0
+  y_high=1
stparms:
igparms:
outparms: x1 x2 y1 y2
n_f= 0
n_g= 2
g_1: y1
g_2: y2
C:
prototypes:
variables:
   double y10,y20;
source:
   if (G.flags[G.i_outvar]) {
     X.outprm[no_x1] = X.val_vr[nvr_x1];
     X.outprm[no_x2] = X.val_vr[nvr_x2];
     X.outprm[no_y1] = X.val_vr[nvr_y1];
     X.outprm[no_y2] = X.val_vr[nvr_y2];
     return;
   }

   flag_invert = X.iprm[ni_flag_invert];

   x1 = X.val_vr[nvr_x1];
   x2 = X.val_vr[nvr_x2];

   if (flag_invert == 0) {
     if (x1 >= x2) {
       y10 = X.rprm[nr_y_high];
       y20 = X.rprm[nr_y_low];
     } else {
       y10 = X.rprm[nr_y_low];
       y20 = X.rprm[nr_y_high];
     }   
   } else {
     if (x1 >= x2) {
       y10 = X.rprm[nr_y_low];
       y20 = X.rprm[nr_y_high];
     } else {
       y10 = X.rprm[nr_y_high];
       y20 = X.rprm[nr_y_low];
     }   
   }

   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_y1] = y10;
     X.val_vr[nvr_y2] = y20;
     return;
   }

   if (G.flags[G.i_trns] || G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y1] = y10;
       X.val_vr[nvr_y2] = y20;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y1] - y10;
         X.g[ng_2] = X.val_vr[nvr_y2] - y20;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y1] = 1.0;
         J.dgdvr[ng_2][nvr_y2] = 1.0;
       }
     }
     return;
   }
endC
endxbe
