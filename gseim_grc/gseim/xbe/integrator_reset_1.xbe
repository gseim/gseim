# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
xbe name=integrator_reset_1 integrate=yes
+ limit_tstep=yes save_history=yes allow_ssw=no reset=yes
# y = k int (x dt)
# output is reset when an active edge at r is detected.
Jacobian: variable
input_vars: x r
output_vars: y
aux_vars:
iparms:
+  active_pos_edge=1
+  active_neg_edge=0
sparms:
rparms:
+  k=1
+  r_high=1
+  delt_min=0.1u
+  y_reset=0.0
+  r_prev=0
+  r_cross=0
stparms: y_st=0
igparms: y_ig=0
outparms: x y r
n_f= 1
f_1: d_dt(y)
n_g= 1
g_1: x
C:
prototypes:
variables:
   int flag_active_edge;
   double time0;
source:
   if (G.flags[G.i_one_time_parms]) {
     active_pos_edge = X.iprm[ni_active_pos_edge];
     active_neg_edge = X.iprm[ni_active_neg_edge];

     if (active_pos_edge == 0) {
       if (active_neg_edge == 0) {
         cout << "integrator_reset_1.xbe: one of pos/neg edge must be 1. Halting..." << endl;
         exit(1);
       }
     } else {
       if (active_neg_edge != 0) {
         cout << "integrator_reset_1.xbe: only one of pos/neg edge must be 1. Halting..." << endl;
         exit(1);
       }
     }
     r_high = X.rprm[nr_r_high];

     if (r_high < 0.0) {
       cout << "integrator_reset_1.xbe: check r_high. Halting..." << endl;
       exit(1);
     }
     r_cross = 0.5*r_high;
     X.rprm[nr_r_cross] = r_cross;
     X.rprm[nr_r_prev] = 0.0;
     return;
   }
   if (G.flags[G.i_init_guess]) {
     X.val_vr [nvr_y] = X.igprm[nig_y_ig];
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_x] = X.val_vr[nvr_x];
     X.outprm[no_y] = X.val_vr[nvr_y];
     X.outprm[no_r] = X.val_vr[nvr_r];
     return;
   }
   if (G.flags[G.i_reset_x]) {
     time0 = G.time_given_x;
     active_pos_edge = X.iprm[ni_active_pos_edge];

     r_prev  = X.rprm[nr_r_prev ];
     r_cross = X.rprm[nr_r_cross];

     r = X.val_vr[nvr_r];

     if (active_pos_edge == 1) {
       if ((r_prev <= r_cross) && (r >= r_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     } else {
       if ((r_prev >= r_cross) && (r <= r_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     }
     if (flag_active_edge == 1) {
       X.val_vr[nvr_y] = X.rprm[nr_y_reset];
     }
     return;
   }
   if (G.flags[G.i_save_history]) {
     X.rprm[nr_r_prev] = X.val_vr[nvr_r];
     return;
   }
   if (G.flags[G.i_next_time]) {
     time0 = G.time_given_x;

     active_pos_edge = X.iprm[ni_active_pos_edge];
     r_prev  = X.rprm[nr_r_prev ];
     r_cross = X.rprm[nr_r_cross];
     r = X.val_vr[nvr_r];

     if (active_pos_edge == 1) {
       if ((r_prev <= r_cross) && (r >= r_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     } else {
       if ((r_prev >= r_cross) && (r <= r_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     }
     if (flag_active_edge == 1) {
       G.time_nextbreak_x = time0 + X.rprm[nr_delt_min];
     } else {
       G.time_nextbreak_x = G.time_end;
     }
     return;
   }
   if (G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = X.stprm[nst_y_st];
     } else if (G.flags[G.i_implicit]) {
       X.h[nf_1] = X.val_vr[nvr_y] - X.stprm[nst_y_st];
     }
     return;
   }
   if (G.flags[G.i_trns]) {
     if (G.flags[G.i_explicit]) {
       if (G.flags[G.i_alg_loop]) {
         X.h[nf_1] = X.val_vr[nvr_y] - X.val_vr_u[nvr_y];
       } else {
         k = X.rprm[nr_k];
         x = X.val_vr[nvr_x];
         X.f[nf_1] = k*x;
       }
     } else if (G.flags[G.i_implicit]) {
       k = X.rprm[nr_k];
       x = X.val_vr[nvr_x];
       if (G.flags[G.i_function]) {
         X.g[ng_1] = k*x;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_x] = k;
       }
     }
     return;
   }
endC
endxbe
