# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
xbe name=pole_complex_order_1 integrate=yes
#
#     --                                          --
#     |      (a + jb)              (a - jb)        |
# y = |-------------------- + -------------------- | * x
#     |(s-(alpha + j*beta))   (s-(alpha - j*beta)) |
#     |_                                          _|

Jacobian: constant
input_vars: x
output_vars: y
aux_vars: z1
iparms:
sparms:
rparms: a=1 b=1 alpha=1 beta=1
stparms: y_st=0
igparms:
outparms:
n_f= 2
f_1: d_dt(y)
f_2: d_dt(z1)
n_g= 2
g_1: x y z1
g_2: x y z1
C:
prototypes:
variables:
   double a2,b2;
source:
   if (G.flags[G.i_one_time_parms]) {
     return;
   }
   if (G.flags[G.i_init_guess]) {
     X.val_vr [nvr_y] = 0.0;
     X.val_aux[na_z1] = 0.0;
     return;
   }
   if (G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = X.stprm[nst_y_st];
       X.val_aux[na_z1] = 0.0;
     } else if (G.flags[G.i_implicit]) {
       X.h[nf_1] = X.val_vr[nvr_y] - X.stprm[nst_y_st];
       X.h[nf_2] = X.val_aux[na_z1];
     }
     return;
   }
   if (G.flags[G.i_outvar]) {
     return;
   }
   if (G.flags[G.i_trns]) {
     a = X.rprm[nr_a];
     b = X.rprm[nr_b];
     alpha = X.rprm[nr_alpha];
     beta = X.rprm[nr_beta];
     a2 = a + a;
     b2 = b + b;

     x = X.val_vr[nvr_x];
     y = X.val_vr[nvr_y];
     z1 = X.val_aux[na_z1];

     if (G.flags[G.i_explicit]) {
       if (G.flags[G.i_alg_loop]) {
         X.h[nf_1] = y - X.val_vr_u[nvr_y];
         X.h[nf_2] = z1 - X.val_aux_u[na_z1];
       } else {
         X.f[nf_1] = alpha*y + a2*x - beta*z1;
         X.f[nf_2] = alpha*z1 + b2*x + beta*y;
       }
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = alpha*y + a2*x - beta*z1;
         X.g[ng_2] = alpha*z1 + b2*x + beta*y;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr [ng_1][nvr_x] = a2;
         J.dgdvr [ng_1][nvr_y] = alpha;
         J.dgdaux[ng_1][na_z1] = -beta;

         J.dgdvr [ng_2][nvr_x] = b2;
         J.dgdvr [ng_2][nvr_y] = beta;
         J.dgdaux[ng_2][na_z1] = alpha;
       }
     }
     return;
   }
endC
endxbe
