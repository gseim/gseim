xbe name=const evaluate=yes
# y = k
Jacobian: constant
input_vars:
output_vars: y
aux_vars:
iparms:
sparms:
rparms:
+  k=0 k_scale=1
stparms:
igparms:
outparms: y
n_f= 0
n_g= 1
g_1: y
C:
prototypes:
variables:
   double k0;
source:
// cout << "const.xbe" << endl;
   k0 = X.rprm[nr_k_scale]*X.rprm[nr_k];
   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_y] = k0;
//   cout << "const.xbe: k0 = " << k0 << endl;
     return;
   }
   if (G.flags[G.i_trns] || G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = k0;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y] - k0;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }
     }
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_y] = X.val_vr[nvr_y];
     return;
   }
endC
endxbe
