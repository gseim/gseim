xbe name=mult_2 evaluate=yes
# y = k*x1*x2
Jacobian: variable
input_vars: x1 x2
output_vars: y
aux_vars:
iparms:
sparms:
rparms:
+  k=1
stparms:
igparms:
outparms: x1 x2 y
n_f= 0
n_g= 1
g_1: x1 x2 y
C:
prototypes:
variables:
source:
   k = X.rprm[nr_k];
   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_y] = k*X.val_vr[nvr_x1]*X.val_vr[nvr_x2];
     return;
   }
   if (G.flags[G.i_trns] || G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = k*X.val_vr[nvr_x1]*X.val_vr[nvr_x2];
     } else if (G.flags[G.i_implicit]) {
       y = X.val_vr[nvr_y];
       x1 = X.val_vr[nvr_x1];
       x2 = X.val_vr[nvr_x2];

       if (G.flags[G.i_function]) {
         X.g[ng_1] = y - k*x1*x2;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y ] =  1.0;
         J.dgdvr[ng_1][nvr_x1] = -k*x2;
         J.dgdvr[ng_1][nvr_x2] = -k*x1;
       }
     }
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_x1] = X.val_vr[nvr_x1];
     X.outprm[no_x2] = X.val_vr[nvr_x2];
     X.outprm[no_y ] = X.val_vr[nvr_y ];
     return;
   }
endC
endxbe
