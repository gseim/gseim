xbe name=srcac evaluate=yes
# y = a*sin(w*(t-t0)+phi)
Jacobian: constant
input_vars:
output_vars: y
aux_vars:
iparms:
sparms:
rparms:
+  a=1 
+  f_hz=1
+  phi_deg=0
+  t0=0
+  dc=0
+  omega=0
+  phi_rad=0
stparms:
igparms:
outparms: y
n_f= 0
n_g= 1
g_1: y
C:
prototypes:
variables:
   double v0;
source:
// cout << "src_ac.xbe" << endl;

   if (G.flags[G.i_one_time_parms]) {
     f_hz    = X.rprm[nr_f_hz   ];
     phi_deg = X.rprm[nr_phi_deg];

     omega   = G.twopi*f_hz;
     phi_rad = G.deg_to_rad*phi_deg;

     X.rprm[nr_omega  ] = omega;
     X.rprm[nr_phi_rad] = phi_rad;

     return;
   }
   if (G.flags[G.i_init_guess]) {
     a       = X.rprm[nr_a      ];
     t0      = X.rprm[nr_t0     ];
     dc      = X.rprm[nr_dc     ];
     omega   = X.rprm[nr_omega  ];
     phi_rad = X.rprm[nr_phi_rad];

     v0 = a*sin(omega*(G.time_given_x-t0)+phi_rad) + dc;

     X.val_vr[nvr_y] = v0;
//   cout << "srcac.xbe: y=" << X.val_vr[nvr_y] << endl;
     return;
   }
   if (G.flags[G.i_trns] || G.flags[G.i_startup]) {
     a       = X.rprm[nr_a      ];
     t0      = X.rprm[nr_t0     ];
     dc      = X.rprm[nr_dc     ];
     omega   = X.rprm[nr_omega  ];
     phi_rad = X.rprm[nr_phi_rad];

     v0 = a*sin(omega*(G.time_given_x-t0)+phi_rad) + dc;
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = v0;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y] - v0;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }
     }
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_y] = X.val_vr[nvr_y];
     return;
   }
endC
endxbe
