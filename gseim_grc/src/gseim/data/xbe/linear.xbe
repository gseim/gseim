# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
xbe name=linear evaluate=yes
#
# (a1/a2)*y = (b1/b2)*x + (c1/c2)
#
Jacobian: constant
input_vars: x
output_vars: y
aux_vars:
iparms:
sparms:
rparms:
+  a1=1
+  a2=1
+  b1=1
+  b2=1
+  c1=0
+  c2=1
+  a=0
+  b=0
+  c=0
stparms:
igparms:
outparms: x y
n_f= 0
n_g= 1
g_1: x y
# (a1/a2)*y = (b1/b2)*x + (c1/c2)
# write as
# a*y = b*x + c
C:
prototypes:
variables:
   double eps;
source:
   if (G.flags[G.i_one_time_parms]) {
     a1 = X.rprm[nr_a1];
     a2 = X.rprm[nr_a2];
     b1 = X.rprm[nr_b1];
     b2 = X.rprm[nr_b2];
     c1 = X.rprm[nr_c1];
     c2 = X.rprm[nr_c2];

     eps = 1.0e-10;

     if (abs(a2) < eps) {
       cout << "linear.xbe: a2 is too small. a2=" << a2 << endl;
       cout << "  halting..." << endl; exit(1);
     }
     if (abs(b2) < eps) {
       cout << "linear.xbe: b2 is too small. b2=" << b2 << endl;
       cout << "  halting..." << endl; exit(1);
     }
     if (abs(c2) < eps) {
       cout << "linear.xbe: c2 is too small. c2=" << c2 << endl;
       cout << "  halting..." << endl; exit(1);
     }
     a = a1/a2;
     b = b1/b2;
     c = c1/c2;

     if (abs(a) < eps) {
       cout << "linear.xbe: a is too small. a=" << a << endl;
       cout << "  halting..." << endl; exit(1);
     }
     X.rprm[nr_a] = a;
     X.rprm[nr_b] = b;
     X.rprm[nr_c] = c;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_x] = X.val_vr[nvr_x];
     X.outprm[no_y] = X.val_vr[nvr_y];
     return;
   }

   a = X.rprm[nr_a];
   b = X.rprm[nr_b];
   c = X.rprm[nr_c];

   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_y] = (b/a)*X.val_vr[nvr_x] + (c/a);
     return;
   }
   if (G.flags[G.i_trns] || G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = (b/a)*X.val_vr[nvr_x] + (c/a);
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = a*X.val_vr[nvr_y] - b*X.val_vr[nvr_x] - c;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] =  a;
         J.dgdvr[ng_1][nvr_x] = -b;
       }
     }
     return;
   }
endC
endxbe
