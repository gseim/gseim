# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
xbe name=decoder_2_4 evaluate=yes
Jacobian: variable
input_vars: x0 x1
output_vars: y0 y1 y2 y3
aux_vars:
iparms:
sparms:
rparms:
+  y00=0
+  y01=0
+  y02=0
+  y03=0
+  y10=0
+  y11=0
+  y12=0
+  y13=0
+  y20=0
+  y21=0
+  y22=0
+  y23=0
+  y30=0
+  y31=0
+  y32=0
+  y33=0
+  x_high=1
+  hb2=0
stparms:
igparms:
outparms: x0 x1 y0 y1 y2 y3
n_f= 0
n_g= 4
g_1: y0
g_2: y1
g_3: y2
g_4: y3
C:
prototypes:
variables:
   const int NX=2;
   const int NY=4;
   int k1,XIN[NX];
   double Y0[NY];
source:
   if (G.flags[G.i_one_time_parms]) {
     x_high = X.rprm[nr_x_high];
     hb2 = 0.5*x_high;
     X.rprm[nr_hb2] = hb2;

     X.vec3d_1.resize(NX);
     for (int i = 0; i < NX; ++i) {
       X.vec3d_1[i].resize(NX);
       for (int j = 0; j < NX; ++j) {
         X.vec3d_1[i][j].resize(NY);
       }
     }
     k1 = 0;
     for (int i = 0; i < NX; ++i) {
       for (int j = 0; j < NX; ++j) {
         for (int k = 0; k < NY; ++k) {
           X.vec3d_1[i][j][k] = X.rprm[k1];
           k1++;
         }
       }
     }
     for (int i = 0; i < NX; ++i) {
       for (int j = 0; j < NX; ++j) {
         for (int k = 0; k < NY; ++k) {
           cout
             << " i: " << i
             << " j: " << j
             << " k: " << k
             << " vec3d_1: " << X.vec3d_1[i][j][k] << endl;
         }
       }
     }
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_x0] = X.val_vr[nvr_x0];
     X.outprm[no_x1] = X.val_vr[nvr_x1];
     X.outprm[no_y0] = X.val_vr[nvr_y0];
     X.outprm[no_y1] = X.val_vr[nvr_y1];
     X.outprm[no_y2] = X.val_vr[nvr_y2];
     X.outprm[no_y3] = X.val_vr[nvr_y3];
     return;
   }
   hb2 = X.rprm[nr_hb2];

   for (int i = 0; i < NX; ++i) {
     if (X.val_vr[i] > hb2) {
       XIN[i] = 1;
     } else {
       XIN[i] = 0;
     }
   }
   for (int i = 0; i < NY; ++i) {
     Y0[i] = X.vec3d_1[XIN[1]][XIN[0]][i];
   }

   if (G.flags[G.i_init_guess]) {
     for (int i = 0; i < NY; ++i) {
       X.val_vr[i + NX] = Y0[i];
     }
     return;
   }
   if (G.flags[G.i_trns] || G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       for (int i = 0; i < NY; ++i) {
         X.val_vr[i + NX] = Y0[i];
       }
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         for (int i = 0; i < NY; ++i) {
           X.g[i] = X.val_vr[i + NX] - Y0[i];
         }
       }
       if (G.flags[G.i_jacobian]) {
         for (int i = 0; i < NY; ++i) {
           J.dgdvr[i][i + NX] = 1.0;
         }
       }
     }
     return;
   }
endC
endxbe
