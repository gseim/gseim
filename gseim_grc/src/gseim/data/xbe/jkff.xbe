# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
xbe name=jkff evaluate=yes limit_tstep=yes save_history=yes allow_ssw=no
#
# JK flip-flop
#
Jacobian: variable
input_vars: clk j k
output_vars: q qbar
aux_vars:
iparms:
+  active_pos_edge=1
+  active_neg_edge=0
sparms:
rparms:
+  x_high=1
+  dt=0.1u
+  clk_prev=0
+  j_prev=0
+  k_prev=0
+  q_next=0
+  x_cross=0
stparms: q_st=0
igparms:
outparms: clk j k q
n_f= 0
n_g= 2
g_1: q
g_2: qbar
C:
prototypes:
variables:
   int flag_active_edge;
   double time0,q0,q0bar;
source:
   if (G.flags[G.i_one_time_parms]) {
     active_pos_edge = X.iprm[ni_active_pos_edge];
     active_neg_edge = X.iprm[ni_active_neg_edge];

     if (active_pos_edge == 0) {
       if (active_neg_edge == 0) {
         cout << "jkff.xbe: one of pos/neg edge must be 1. Halting..." << endl;
         exit(1);
       }
     } else {
       if (active_neg_edge != 0) {
         cout << "jkff.xbe: only one of pos/neg edge must be 1. Halting..." << endl;
         exit(1);
       }
     }
     x_high = X.rprm[nr_x_high];

     if (x_high < 0.0) {
       cout << "jkff.xbe: check x_high. Halting..." << endl;
       exit(1);
     }
     x_cross = 0.5*x_high;
     X.rprm[nr_x_cross] = x_cross;

     X.rprm[nr_clk_prev] = 0.0;
     X.rprm[nr_j_prev] = 0.0;
     X.rprm[nr_k_prev] = 0.0;
     X.rprm[nr_q_next] = 0.0;
     return;
   }

   if (G.flags[G.i_outvar]) {
     X.outprm[no_clk] = X.val_vr[nvr_clk];
     X.outprm[no_j  ] = X.val_vr[nvr_j  ];
     X.outprm[no_k  ] = X.val_vr[nvr_k  ];
     X.outprm[no_q  ] = X.val_vr[nvr_q  ];
     return;
   }
   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_q   ] = 0.0;
     X.val_vr[nvr_qbar] = X.rprm[nr_x_high];
     return;
   }
   if (G.flags[G.i_save_history]) {
     time0 = G.time_given_x;
     active_pos_edge = X.iprm[ni_active_pos_edge];

     clk_prev = X.rprm[nr_clk_prev];
     x_cross  = X.rprm[nr_x_cross ];
     x_high   = X.rprm[nr_x_high  ];

     clk = X.val_vr[nvr_clk];
     j   = X.val_vr[nvr_j  ];
     k   = X.val_vr[nvr_k  ];
     q   = X.val_vr[nvr_q  ];

     if (active_pos_edge == 1) {
       if ((clk_prev <= x_cross) && (clk >= x_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     } else {
       if ((clk_prev >= x_cross) && (clk <= x_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     }
     if (flag_active_edge == 1) {
       j_prev = X.rprm[nr_j_prev];
       k_prev = X.rprm[nr_k_prev];

       if (j_prev > x_cross) {
         if (k_prev > x_cross) {
           if (q > x_cross) {
             q_next = 0.0;
           } else {
             q_next = x_high;
           }
         } else {
           q_next = x_high;
         }
       } else {
         if (k_prev > x_cross) {
           q_next = 0.0;
         } else {
           q_next = q;
         }
       }
     } else {
       q_next = q;
     }

     X.rprm[nr_clk_prev] = clk;
     X.rprm[nr_j_prev  ] = j;
     X.rprm[nr_k_prev  ] = k;
     X.rprm[nr_q_next  ] = q_next;

     return;
   }
   if (G.flags[G.i_next_time]) {
     time0 = G.time_given_x;

     active_pos_edge = X.iprm[ni_active_pos_edge];

     clk_prev = X.rprm[nr_clk_prev];
     x_cross  = X.rprm[nr_x_cross ];

     clk = X.val_vr[nvr_clk];

     if (active_pos_edge == 1) {
       if ((clk_prev <= x_cross) && (clk >= x_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     } else {
       if ((clk_prev >= x_cross) && (clk <= x_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     }
     if (flag_active_edge == 1) {
       G.time_nextbreak_x = time0 + X.rprm[nr_dt];
     } else {
       G.time_nextbreak_x = G.time_end;
     }
     return;
   }
   if (G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       q_st = X.stprm[nst_q_st];

       x_cross = X.rprm[nr_x_cross];
       x_high  = X.rprm[nr_x_high ];

       if (q_st > x_cross) {
         X.val_vr[nvr_q   ] = x_high;
         X.val_vr[nvr_qbar] = 0.0;
       } else {
         X.val_vr[nvr_q   ] = 0.0;
         X.val_vr[nvr_qbar] = x_high;
       }
     } else if (G.flags[G.i_implicit]) {
       q_st = X.stprm[nst_q_st];

       x_cross = X.rprm[nr_x_cross];
       x_high  = X.rprm[nr_x_high ];

       if (q_st > x_cross) {
         q0    = x_high;
         q0bar = 0.0;
       } else {
         q0    = 0.0;
         q0bar = x_high;
       }
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_q   ] - q0;
         X.g[ng_2] = X.val_vr[nvr_qbar] - q0bar;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_q   ] = 1.0;
         J.dgdvr[ng_2][nvr_qbar] = 1.0;
       }
     }
     return;
   }
   if (G.flags[G.i_trns]) {
     time0 = G.time_given_x;

     if (G.iter_trns_x == 0) {
       if (G.flags[G.i_slv_init]) {
         q0 = X.rprm[nr_q_next];
       } else {
         q0 = X.val_vr[nvr_q];
       }
     } else {
       q0 = X.rprm[nr_q_next];
     }

     x_cross = X.rprm[nr_x_cross];
     x_high  = X.rprm[nr_x_high ];

     if (q0 > x_cross) {
       q0bar = 0.0;
     } else {
       q0bar = x_high;
     }
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_q   ] = q0;
       X.val_vr[nvr_qbar] = q0bar;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_q   ] - q0;
         X.g[ng_2] = X.val_vr[nvr_qbar] - q0bar;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_q   ] = 1.0;
         J.dgdvr[ng_2][nvr_qbar] = 1.0;
       }
     }
   }
endC
endxbe
