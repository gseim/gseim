xbe name=limiter evaluate=yes
Jacobian: variable
input_vars: x
output_vars: y
aux_vars:
iparms:
sparms:
rparms: xmin=-1 xmax=1
stparms:
igparms:
outparms: x y
n_f= 0
n_g= 1
g_1: x y
C:
prototypes:
variables:
   double y0;
source:
   if (G.flags[G.i_outvar]) {
     X.outprm[no_x] = X.val_vr[nvr_x];
     X.outprm[no_y] = X.val_vr[nvr_y];
     return;
   }
   xmin = X.rprm[nr_xmin];
   xmax = X.rprm[nr_xmax];

   x = X.val_vr[nvr_x];
   if (x >= xmax) {
     y0 = xmax;
   } else if (x <= xmin) {
     y0 = xmin;
   } else {
     y0 = x;
   }   

   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_y] = y0;
     return;
   }
   if (G.flags[G.i_trns] || G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = y0;
     } else if (G.flags[G.i_implicit]) {
       y = X.val_vr[nvr_y];

       if (G.flags[G.i_function]) {
         X.g[ng_1] = y - y0;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] =  1.0;
         if (x >= xmax) {
           J.dgdvr[ng_1][nvr_x] = 0.0;
         } else if (x <= xmin) {
           J.dgdvr[ng_1][nvr_x] = 0.0;
         } else {
           J.dgdvr[ng_1][nvr_x] = -1.0;
         }   
       }
     }
     return;
   }
endC
endxbe
