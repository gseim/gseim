xbe name=indmc2a integrate=yes
# induction motor model
# (same as indmc1.xbe; this one is to be used along with
# indmc2b.xbe)
Jacobian: variable
input_vars: vqs vds tl
output_vars: wrm
+  psids psidr psiqs psiqr
aux_vars:
iparms:
+  poles=4
sparms:
rparms:
+  rs=0.435
+  lls=0.002
+  lm=0.0693
+  llr=0.002
+  rr=0.816
+  j=0.089
+  ls=0
+  lr=0
+  le=0
+  l1=0
+  l2=0
+  l3=0
+  x1=0
+  x2=0
stparms:
+  psids0=0
+  psiqs0=0
+  psidr0=0
+  psiqr0=0
+  wrm0=0
igparms:
outparms:
+  wrm
+  tem
+  vds
+  vqs
n_f= 5
f_1: d_dt(psids)
f_2: d_dt(psiqs)
f_3: d_dt(psidr)
f_4: d_dt(psiqr)
f_5: d_dt(wrm)
n_g= 5
g_1: vds psids psidr
g_2: vqs psiqs psiqr
g_3: wrm psiqr psids psidr
g_4: wrm psidr psiqs psiqr
g_5: tl psids psidr psiqs psiqr
C:
prototypes:
variables:
   double ids,iqs,idr,iqr,wr,tem0;
   double p;
   static double k4=0;
   double ids_psids,ids_psidr,iqs_psiqs,iqs_psiqr;
   double idr_psids,idr_psidr,iqr_psiqs,iqr_psiqr;
   double tem0_iqs,tem0_idr,tem0_ids,tem0_iqr;
   double tem0_psids,tem0_psidr,tem0_psiqs,tem0_psiqr;
   double wr_wrm;
source:
// cout << "indmc1.xbe" << endl;

   if (G.flags[G.i_one_time_parms]) {
     k4 = 0.5*(sqrt(3.0));

     lls = X.rprm[nr_lls];
     lm  = X.rprm[nr_lm ];
     llr = X.rprm[nr_llr];

     ls = lls + lm;
     lr = llr + lm;
     le = (ls*lr/lm) - lm;
     l1 = lr/(lm*le);
     l2 = 1.0 + (lls/lm);
     l3 = lls/lm;

     X.rprm[nr_ls] = ls;
     X.rprm[nr_lr] = lr;
     X.rprm[nr_le] = le;
     X.rprm[nr_l1] = l1;
     X.rprm[nr_l2] = l2;
     X.rprm[nr_l3] = l3;

     poles = X.iprm[ni_poles];
     p = (double)(poles);
     x1 = 0.75*p*lm;
     x2 = 0.5*p;

     X.rprm[nr_x1] = x1;
     X.rprm[nr_x2] = x2;

     return;
   }
   if (G.flags[G.i_init_guess]) {
//   for init guess, use start-up parameters (for this element)
//   can add separate igparms for this purpose later.
     X.val_vr[nvr_psids] = X.stprm[nst_psids0];
     X.val_vr[nvr_psiqs] = X.stprm[nst_psiqs0];
     X.val_vr[nvr_psidr] = X.stprm[nst_psidr0];
     X.val_vr[nvr_psiqr] = X.stprm[nst_psiqr0];
     X.val_vr[nvr_wrm  ] = X.stprm[nst_wrm0  ];
     return;
   }
   if (G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_psids] = X.stprm[nst_psids0];
       X.val_vr[nvr_psiqs] = X.stprm[nst_psiqs0];
       X.val_vr[nvr_psidr] = X.stprm[nst_psidr0];
       X.val_vr[nvr_psiqr] = X.stprm[nst_psiqr0];
       X.val_vr[nvr_wrm  ] = X.stprm[nst_wrm0  ];
     } else {
       X.h[nf_1] = X.val_vr[nvr_psids] - X.stprm[nst_psids0];
       X.h[nf_2] = X.val_vr[nvr_psiqs] - X.stprm[nst_psiqs0];
       X.h[nf_3] = X.val_vr[nvr_psidr] - X.stprm[nst_psidr0];
       X.h[nf_4] = X.val_vr[nvr_psiqr] - X.stprm[nst_psiqr0];
       X.h[nf_5] = X.val_vr[nvr_wrm  ] - X.stprm[nst_wrm0  ];
     }
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_wrm] = X.val_vr[nvr_wrm];
     X.outprm[no_vds] = X.val_vr[nvr_vds];
     X.outprm[no_vqs] = X.val_vr[nvr_vqs];

     psids = X.val_vr[nvr_psids];
     psidr = X.val_vr[nvr_psidr];
     psiqs = X.val_vr[nvr_psiqs];
     psiqr = X.val_vr[nvr_psiqr];

     le  = X.rprm[nr_le];
     lm  = X.rprm[nr_lm];
     l1  = X.rprm[nr_l1];
     l2  = X.rprm[nr_l2];

     ids = (l1*psids) - (psidr/le);
     iqs = (l1*psiqs) - (psiqr/le);
     idr = (psids/lm) - (l2*ids);
     iqr = (psiqs/lm) - (l2*iqs);

     x1 = X.rprm[nr_x1];
     tem0 = x1*(iqs*idr-ids*iqr);
     X.outprm[no_tem] = tem0;

     return;
   }
   if (G.flags[G.i_trns]) {
     if (G.flags[G.i_explicit]) {
       if (G.flags[G.i_alg_loop]) {
         X.h[nf_1] = X.val_vr[nvr_psids] - X.val_vr_u[nvr_psids];
         X.h[nf_2] = X.val_vr[nvr_psiqs] - X.val_vr_u[nvr_psiqs];
         X.h[nf_3] = X.val_vr[nvr_psidr] - X.val_vr_u[nvr_psidr];
         X.h[nf_4] = X.val_vr[nvr_psiqr] - X.val_vr_u[nvr_psiqr];
         X.h[nf_5] = X.val_vr[nvr_wrm  ] - X.val_vr_u[nvr_wrm  ];
       } else {
         rs  = X.rprm[nr_rs ];
         lls = X.rprm[nr_lls];
         lm  = X.rprm[nr_lm ];
         rr  = X.rprm[nr_rr ];
         j   = X.rprm[nr_j  ];
         le  = X.rprm[nr_le ];
         l1  = X.rprm[nr_l1 ];
         l2  = X.rprm[nr_l2 ];
         l3  = X.rprm[nr_l3 ];
         x1  = X.rprm[nr_x1 ];
         x2  = X.rprm[nr_x2 ];

         vqs = X.val_vr[nvr_vqs];
         vds = X.val_vr[nvr_vds];
         wrm = X.val_vr[nvr_wrm];
         tl  = X.val_vr[nvr_tl ];

         psids = X.val_vr[nvr_psids];
         psidr = X.val_vr[nvr_psidr];
         psiqs = X.val_vr[nvr_psiqs];
         psiqr = X.val_vr[nvr_psiqr];

         ids = (l1*psids) - (psidr/le);
         iqs = (l1*psiqs) - (psiqr/le);

         idr = (psids/lm) - (l2*ids);
         iqr = (psiqs/lm) - (l2*iqs);

         tem0 = x1*(iqs*idr-ids*iqr);
         wr   = x2*wrm;

         X.f[nf_1] = vds-rs*ids;
         X.f[nf_2] = vqs-rs*iqs;
         X.f[nf_3] = (-wr)*psiqr-rr*idr;
         X.f[nf_4] = ( wr)*psidr-rr*iqr;
         X.f[nf_5] = (tem0-tl)/j;
       }
     } else {
//     There is some repetition here; never mind.
       rs  = X.rprm[nr_rs ];
       lls = X.rprm[nr_lls];
       lm  = X.rprm[nr_lm ];
       rr  = X.rprm[nr_rr ];
       j   = X.rprm[nr_j  ];
       le  = X.rprm[nr_le ];
       l1  = X.rprm[nr_l1 ];
       l2  = X.rprm[nr_l2 ];
       l3  = X.rprm[nr_l3 ];
       x1  = X.rprm[nr_x1 ];
       x2  = X.rprm[nr_x2 ];

       vqs = X.val_vr[nvr_vqs];
       vds = X.val_vr[nvr_vds];
       wrm = X.val_vr[nvr_wrm];
       tl  = X.val_vr[nvr_tl ];

       psids = X.val_vr[nvr_psids];
       psidr = X.val_vr[nvr_psidr];
       psiqs = X.val_vr[nvr_psiqs];
       psiqr = X.val_vr[nvr_psiqr];

       if (G.flags[G.i_function] || G.flags[G.i_jacobian]) {
         ids = (l1*psids) - (psidr/le);
         iqs = (l1*psiqs) - (psiqr/le);
         idr = (psids/lm) - (l2*ids);
         iqr = (psiqs/lm) - (l2*iqs);
         tem0 = x1*(iqs*idr-ids*iqr);
         wr = x2*wrm;

         if (G.flags[G.i_function]) {
           X.g[ng_1] = vds-rs*ids;
           X.g[ng_2] = vqs-rs*iqs;
           X.g[ng_3] = (-wr)*psiqr-rr*idr;
           X.g[ng_4] = ( wr)*psidr-rr*iqr;
           X.g[ng_5] = (tem0-tl)/j;
         }
       }
       if (G.flags[G.i_jacobian]) {
//       ids = (l1*psids) - (psidr/le);
         ids_psids = l1;
         ids_psidr = -1.0/le;

//       iqs = (l1*psiqs) - (psiqr/le);
         iqs_psiqs = l1;
         iqs_psiqr = -1.0/le;

//       idr = (psids/lm) - (l2*ids);
         idr_psids = (1.0/lm) - (l2*ids_psids);
         idr_psidr =          - (l2*ids_psidr);

//       iqr = (psiqs/lm) - (l2*iqs);
         iqr_psiqs = (1.0/lm) - (l2*iqs_psiqs);
         iqr_psiqr =          - (l2*iqs_psiqr);

//       tem0 = x1*(iqs*idr-ids*iqr);
         tem0_iqs =  x1*idr;
         tem0_idr =  x1*iqs;
         tem0_ids = -x1*iqr;
         tem0_iqr = -x1*ids;

         tem0_psids =
           tem0_idr*idr_psids +
           tem0_ids*ids_psids;

         tem0_psidr =
           tem0_idr*idr_psidr +
           tem0_ids*ids_psidr;

         tem0_psiqs =
           tem0_iqs*iqs_psiqs +
           tem0_iqr*iqr_psiqs;

         tem0_psiqr =
           tem0_iqs*iqs_psiqr +
           tem0_iqr*iqr_psiqr;

//       wr = x2*wrm;
         wr_wrm = x2;

//       X.g[ng_1] = vds-rs*ids;
         J.dgdvr[ng_1][nvr_vds] = 1.0;
         J.dgdvr[ng_1][nvr_psids] = -rs*ids_psids;
         J.dgdvr[ng_1][nvr_psidr] = -rs*ids_psidr;

//       X.g[ng_2] = vqs-rs*iqs;
         J.dgdvr[ng_2][nvr_vqs] = 1.0;
         J.dgdvr[ng_2][nvr_psiqs] = -rs*iqs_psiqs;
         J.dgdvr[ng_2][nvr_psiqr] = -rs*iqs_psiqr;

//       X.g[ng_3] = (-wr)*psiqr-rr*idr;
         J.dgdvr[ng_3][nvr_wrm] = (-wr_wrm)*psiqr;
         J.dgdvr[ng_3][nvr_psiqr] = (-wr);
         J.dgdvr[ng_3][nvr_psids] = -rr*idr_psids;
         J.dgdvr[ng_3][nvr_psidr] = -rr*idr_psidr;

//       X.g[ng_4] = ( wr)*psidr-rr*iqr;
         J.dgdvr[ng_4][nvr_wrm] = (wr_wrm)*psidr;
         J.dgdvr[ng_4][nvr_psidr] = wr;
         J.dgdvr[ng_4][nvr_psiqs] = -rr*iqr_psiqs;
         J.dgdvr[ng_4][nvr_psiqr] = -rr*iqr_psiqr;

//       X.g[ng_5] = (tem0-tl)/j;
         J.dgdvr[ng_5][nvr_tl] = -1.0/j;
         J.dgdvr[ng_5][nvr_psids] = tem0_psids/j;
         J.dgdvr[ng_5][nvr_psidr] = tem0_psidr/j;
         J.dgdvr[ng_5][nvr_psiqs] = tem0_psiqs/j;
         J.dgdvr[ng_5][nvr_psiqr] = tem0_psiqr/j;
       }
     }
     return;
   }

endC
endxbe
