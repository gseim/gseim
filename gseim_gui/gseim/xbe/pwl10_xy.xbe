xbe name=pwl10_xy evaluate=yes
# y vs x described in a piecewise linear form
Jacobian: variable
input_vars: x
output_vars: y
aux_vars:
iparms: n=2
sparms:
rparms:
+  x1=1 x2=1 x3=1 x4=1 x5=1
+  x6=1 x7=1 x8=1 x9=1 x10=1
+  y1=1 y2=1 y3=1 y4=1 y5=1
+  y6=1 y7=1 y8=1 y9=1 y10=1
stparms:
igparms:
outparms: x y
n_f= 0
n_g= 1
g_1: y
C:
prototypes:
variables:
   int indx,i;
// i_offset is the total number of points (=10 for pwl10)
   const int i_offset=10;
   double x1a,x2a,y1a,y2a,slope,y0;
source:
// cout << "pwl10_xy.xbe" << endl;

   if (G.flags[G.i_one_time_parms]) {
     X.val_vr[nvr_y] = 0.0;
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_x] = X.val_vr[nvr_x];
     X.outprm[no_y] = X.val_vr[nvr_y];
     return;
   }

   n = X.iprm[ni_n];
   x = X.val_vr[nvr_x];
   y = X.val_vr[nvr_y];

   indx = n-1;
   for (i=0; i < n; i++) {
     if (x <= X.rprm[i]) {
       indx = i-1;
       break;
     }
   }
   if (indx == (-1)) {
     y0 = X.rprm[i_offset];
   } else if (indx == (n-1)) {
     y0 = X.rprm[i_offset+n-1];
   } else {
     x1a = X.rprm[indx];
     x2a = X.rprm[indx+1];
     y1a = X.rprm[i_offset+indx];
     y2a = X.rprm[i_offset+indx+1];

     if (abs(x2a-x1a) < 1.0e-12) {
       cout << "pwl10_xy.xbe: x1 and x2 are too close!" << endl;
       cout << "   Halting.." << endl;
       exit (1);
     }
     slope = (y2a-y1a)/(x2a-x1a);
     y0 = y1a + slope*(x-x1a);
   }

   if (G.flags[G.i_init_guess]) {
//   cout << "pwl10_xy: init_guess: y0 =" << y0 << endl;
     X.val_vr[nvr_y] = y0;
     return;
   }
   if (G.flags[G.i_trns] || G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = y0;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y] - y0;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }
     }
     return;
   }
endC
endxbe
