# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
xbe name=clock_3ph evaluate=yes limit_tstep=yes
Jacobian: constant
input_vars:
output_vars: y
aux_vars:
iparms:
+  index1=1
+  flag_frequency=1
+  flag_period=0
sparms:
rparms:
+  x_low=0
+  x_high=1.0
+  frequency=1k
+  T=1m
+  D=0.5
+  alpha=0
+  dt=0.1u
+  T1=1
+  T2=1
+  t0=0
+  dt1=0.01
+  dt2=0.01
+  L0=0
+  L1=0
+  L2=0
+  tk1=0
+  tk2=0
+  tk3=0
+  tk4=0
+  tk5=0
+  slope1=0
+  slope2=0
+  epsl=0
stparms:
igparms:
outparms: y
n_f= 0
n_g= 1
g_1: y
#
# specify
# index1, x_low, x_high, T (or frequency), D (duty cycle), dt
# (all other parms are computed)
#
# index1 can be 1,2,..,6, corresponding to 0, 60, 120,.. deg phase shift
# Note: alpha gives an additional phase shift.
#
# used to generate clock pulses in 3-ph circuits.

# T1: first interval
# T2: second
# dt1: transition time at the beginning of the t1 interval
# dt2: transition time at the beginning of the t2 interval

C:
prototypes:
variables:
   double y0,t0_new,dt_min,del1,del2,t_a,t_b,tnext_p;
   int n;
source:
   if (G.flags[G.i_one_time_parms]) {
     flag_frequency = X.iprm[ni_flag_frequency];
     flag_period = X.iprm[ni_flag_period];

     if ((flag_frequency == 0) && (flag_period == 0)) {
       cout << "clock_3ph.xbe: check flag_frequency and flag_period" << endl;
       cout << "  Both cannot be zero." << endl;
       cout << "  Halting..." << endl; exit(1);
     }
     if ((flag_frequency != 0) && (flag_period != 0)) {
       cout << "clock_3ph.xbe: check flag_frequency and flag_period" << endl;
       cout << "  Both cannot be non-zero." << endl;
       cout << "  Halting..." << endl; exit(1);
     }
     index1 = X.iprm[ni_index1];
     if ((index1 < 1) || (index1 > 6)) {
       cout << "clock_3ph.xbe: index1 must be in the range 1 to 6" << endl;
       cout << "  Halting..." << endl; exit(1);
     }
     if (flag_frequency != 0) {
       frequency = X.rprm[nr_frequency];
       T = 1.0/frequency;
       X.rprm[nr_T] = T;
     }
     if (flag_period != 0) {
       T = X.rprm[nr_T];
       frequency = 1.0/T;
       X.rprm[nr_frequency] = frequency;
     }
     x_low  = X.rprm[nr_x_low ];
     x_high = X.rprm[nr_x_high];
     T      = X.rprm[nr_T     ];
     dt     = X.rprm[nr_dt    ];
     D      = X.rprm[nr_D     ];
     alpha  = X.rprm[nr_alpha ];

     T1 = D*T;
     T2 = T - T1;
     t0 = (alpha/360.0)*T + ((double)(index1-1))*(T/6.0);
     dt1 = dt;
     dt2 = dt;

     X.rprm[nr_T1 ] = T1;
     X.rprm[nr_T2 ] = T2;
     X.rprm[nr_t0 ] = t0;
     X.rprm[nr_dt1] = dt;
     X.rprm[nr_dt2] = dt;

     L1 = x_high;
     L2 = x_low;

     slope1 = (L1-L2)/dt1;
     slope2 = (L2-L1)/dt2;
     epsl = min(dt1,dt2)/10.0;
     L0 = 0.5*(L1+L2);

     X.rprm[nr_slope1] = slope1;
     X.rprm[nr_slope2] = slope2;
     X.rprm[nr_L1] = L1;
     X.rprm[nr_L2] = L2;
     X.rprm[nr_L0] = L0;
     X.rprm[nr_epsl] = epsl;

     dt_min = 0.1*min(dt1,dt2);
     del1 = T1-0.5*(dt1+dt2);
     del2 = T2-0.5*(dt1+dt2);

     if (del1 < dt_min) {
       cout << "clock_3ph.xbe: T1 is too small. Check dt1, dt2. Halting..." << endl; exit(1);
     }
     if (del2 < dt_min) {
       cout << "clock_3ph.xbe: T2 is too small. Check dt1, dt2. Halting..." << endl; exit(1);
     }
     tk1 = 0.5*dt1;
     tk2 = T1 - 0.5*dt2;
     tk3 = T1 + 0.5*dt2;
     tk4 = T  - 0.5*dt1;
     tk5 = T  + 0.5*dt1;

     X.rprm[nr_tk1] = tk1;
     X.rprm[nr_tk2] = tk2;
     X.rprm[nr_tk3] = tk3;
     X.rprm[nr_tk4] = tk4;
     X.rprm[nr_tk5] = tk5;

     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_y] = X.val_vr[nvr_y];
     return;
   }

// todo
   t0   = X.rprm[nr_t0  ];
   T    = X.rprm[nr_T   ];
   epsl = X.rprm[nr_epsl];
   tk1  = X.rprm[nr_tk1 ];
   tk2  = X.rprm[nr_tk2 ];
   tk3  = X.rprm[nr_tk3 ];
   tk4  = X.rprm[nr_tk4 ];
   tk5  = X.rprm[nr_tk5 ];

   if (G.time_given_x < t0) {
     n = ((t0-G.time_given_x)/T) + 1;
     t0_new = t0-n*T;
   } else {
     t0_new = t0;
   }
   t_a = G.time_given_x-t0_new;
   t_b = fmod(t_a,T);

   if (abs(t_b-T) < epsl) t_b = 0.0;

   if (G.flags[G.i_next_time]) {

     if (t_b < tk1) {
       tnext_p = tk1;
     } else if (t_b < tk2) {
       tnext_p = tk2;
     } else if (t_b < tk3) {
       tnext_p = tk3;
     } else if (t_b < tk4) {
       tnext_p = tk4;
     } else {
       tnext_p = tk5;
     }
     G.time_nextbreak_x = G.time_given_x + (tnext_p-t_b);
     return;
   }

   L0 = X.rprm[nr_L0];
   L1 = X.rprm[nr_L1];
   L2 = X.rprm[nr_L2];
   slope1 = X.rprm[nr_slope1];
   slope2 = X.rprm[nr_slope2];

   if (t_b < tk1) {
     y0 = L0 + slope1*t_b;
   } else if (t_b < tk2) {
     y0 = L1;
   } else if (t_b < tk3) {
     y0 = L1 + slope2*(t_b-tk2);
   } else if (t_b < tk4) {
     y0 = L2;
   } else {
     y0 = L2 + slope1*(t_b-tk4);
   }

   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_y] = y0;
     return;
   }
   if (G.flags[G.i_trns] || G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = y0;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y] - y0;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }
     }
     return;
   }
endC
endxbe
