# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
xbe name=edge_delay_1 evaluate=yes limit_tstep=yes save_history=yes allow_ssw=no
#
# When a positive edge at x is detected, y is made to change
# from low to high after the specified delay (t_delay).
#
Jacobian: variable
input_vars: x
output_vars: y
aux_vars:
iparms:
sparms:
rparms:
+  x_high=1
+  t_delay=10u
+  t_rise=0.01m
+  x_prev=0
+  x_cross=0
+  t2=0
+  epsl1=0
stparms:
igparms:
outparms: x y
n_f= 0
n_g= 1
g_1: y
C:
prototypes:
variables:
   int flag_active_edge;
   double time0,y0;
source:
   if (G.flags[G.i_one_time_parms]) {
     x_high  = X.rprm[nr_x_high ];
     t_delay = X.rprm[nr_t_delay];

     if (x_high < 0.0) {
       cout << "edge_delay_1.xbe: x_high < 0? Halting..." << endl;
       exit(1);
     }
     x_cross = 0.5*x_high;
     X.rprm[nr_x_cross] = x_cross;

     t_rise = X.rprm[nr_t_rise];
     epsl1 = 1.1*t_rise;

     X.rprm[nr_epsl1] = epsl1;

     X.rprm[nr_x_prev] = 0.0;
     X.rprm[nr_t2    ] = G.time_begin;
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_x] = X.val_vr[nvr_x];
     X.outprm[no_y] = X.val_vr[nvr_y];
     return;
   }
   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_y] = 0.0;
     return;
   }
   if (G.flags[G.i_save_history]) {
     time0 = G.time_given_x;

     x_prev  = X.rprm[nr_x_prev ];
     x_cross = X.rprm[nr_x_cross];

     x = X.val_vr[nvr_x];

     if ((x_prev <= x_cross) && (x >= x_cross)) {
       flag_active_edge = 1;
     } else {
       flag_active_edge = 0;
     }
     if (flag_active_edge == 1) {
       X.rprm[nr_t2] = time0 + X.rprm[nr_t_delay];
     }
     X.rprm[nr_x_prev] = x;

     return;
   }
   if (G.flags[G.i_next_time]) {
     time0 = G.time_given_x;
     t2 = X.rprm[nr_t2];

     x_prev  = X.rprm[nr_x_prev ];
     x_cross = X.rprm[nr_x_cross];
     x = X.val_vr[nvr_x];

     if ((x_prev <= x_cross) && (x >= x_cross)) {
       flag_active_edge = 1;
     } else {
       flag_active_edge = 0;
     }
     if (flag_active_edge == 1) {
       G.time_nextbreak_x = time0 + X.rprm[nr_t_delay];
       return;
     }
     if (time0 < t2) {
       t_rise = X.rprm[nr_t_rise];
       epsl1 = X.rprm[nr_epsl1];

       if ((t2-time0) <= epsl1) {
         G.time_nextbreak_x = t2 + t_rise;
       } else {
         G.time_nextbreak_x = t2 - t_rise;
       }
     } else {
       G.time_nextbreak_x = G.time_end;
     }
     return;
   }
   if (G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = 0.0;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y];
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }
     }
     return;
   }
   if (G.flags[G.i_trns]) {
     time0 = G.time_given_x;
     x = X.val_vr[nvr_x];

     x_cross = X.rprm[nr_x_cross];
     x_prev  = X.rprm[nr_x_prev ];
     t2      = X.rprm[nr_t2     ];

     if (time0 < t2) {
       y0 = 0.0;
     } else {
       if ((x < x_cross) || (x_prev < x_cross)) {
         y0 = 0.0;
         X.rprm[nr_t2] = G.time_begin;
       } else {
         y0 = X.rprm[nr_x_high];
       }
     }

     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = y0;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y] - y0;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }
     }
   }
endC
endxbe
