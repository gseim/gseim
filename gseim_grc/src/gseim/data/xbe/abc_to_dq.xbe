# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
xbe name=abc_to_dq evaluate=yes
# convert van,vbn,vcn to vqs,vds
Jacobian: constant
input_vars: van vbn vcn
output_vars: vqs vds
aux_vars:
iparms:
sparms:
rparms:
stparms:
igparms:
outparms: van vbn vcn vqs vds
n_f= 0
n_g= 2
g_1: vqs van vbn vcn
g_2: vds vbn vcn
C:
prototypes:
variables:
   static double k1=0,k2=0,k3=0;
source:
// cout << "abc_to_dq.xbe" << endl;

   if (G.flags[G.i_one_time_parms]) {
     k1 = 2.0/3.0;
     k2 = 1.0/3.0;
     k3 = 1.0/(sqrt(3.0));
     return;
   }
   if (G.flags[G.i_init_guess]) {
     van = X.val_vr[nvr_van];
     vbn = X.val_vr[nvr_vbn];
     vcn = X.val_vr[nvr_vcn];

     X.val_vr[nvr_vqs] = k1*van - k2*(vbn + vcn);
     X.val_vr[nvr_vds] = - k3*(vbn - vcn);
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_van] = X.val_vr[nvr_van];
     X.outprm[no_vbn] = X.val_vr[nvr_vbn];
     X.outprm[no_vcn] = X.val_vr[nvr_vcn];
     X.outprm[no_vqs] = X.val_vr[nvr_vqs];
     X.outprm[no_vds] = X.val_vr[nvr_vds];
     return;
   }
   if (G.flags[G.i_trns] || G.flags[G.i_startup]) {
     van = X.val_vr[nvr_van];
     vbn = X.val_vr[nvr_vbn];
     vcn = X.val_vr[nvr_vcn];
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_vqs] = k1*van - k2*(vbn + vcn);
       X.val_vr[nvr_vds] = - k3*(vbn - vcn);
     } else if (G.flags[G.i_implicit]) {
       vqs = X.val_vr[nvr_vqs];
       vds = X.val_vr[nvr_vds];
       if (G.flags[G.i_function]) {
         X.g[ng_1] = vqs -(k1*van - k2*(vbn + vcn));
         X.g[ng_2] = vds -(- k3*(vbn - vcn));
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_vqs] = 1.0;
         J.dgdvr[ng_1][nvr_van] = -k1;
         J.dgdvr[ng_1][nvr_vbn] =  k2;
         J.dgdvr[ng_1][nvr_vcn] =  k2;

         J.dgdvr[ng_2][nvr_vds] = 1.0;
         J.dgdvr[ng_2][nvr_vbn] =  k3;
         J.dgdvr[ng_2][nvr_vcn] = -k3;
       }
     }
     return;
   }
endC
endxbe
