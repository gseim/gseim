# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
ebe name=vsrc_ac
# ac voltage source
# f_hz in Hz, phi_deg in deg
# a is amplitude in volts
Jacobian: constant
nodes: p n
state_vars:
aux_vars: cur_p
aux_vars_startup: cur_p_s
x_vars:
iparms:
sparms:
rparms:
+   a=1
+   f_hz=1
+   phi_deg=0
+   t0=0
+   omega=0
+   phi_rad=0
+   vdc=0
stparms:
igparms:
outparms: i v
n_f=3
f_1: cur_p
f_2: cur_p
f_3: v(p) v(n)
n_g=0
n_h=3
h_1: cur_p_s
h_2: cur_p_s
h_3: v(p) v(n)
C:
prototypes:
variables:
   double v0;
source:
   if (G.flags[G.i_one_time_parms]) {
     f_hz    = X.rprm[nr_f_hz];
     phi_deg = X.rprm[nr_phi_deg];
     omega   = G.twopi*f_hz;
     phi_rad = G.deg_to_rad*phi_deg;

     X.rprm[nr_omega  ] = omega;
     X.rprm[nr_phi_rad] = phi_rad;
   }
   if (G.flags[G.i_outvar]) {
      X.outprm[no_v] = X.val_nd[nnd_p]-X.val_nd[nnd_n];
      X.outprm[no_i] = X.cur_nd[nnd_n];
   }
   if (G.flags[G.i_init_guess]) {
     X.val_nd[nnd_n] = 0.0;
     X.val_nd[nnd_p] = 0.0;
   }
   if (G.flags[G.i_dc]) {
     vdc = X.rprm[nr_vdc];
     v0 = vdc;
   }
   if (G.flags[G.i_startup] || G.flags[G.i_trns] || G.flags[G.i_init_guess]) {
     a       = X.rprm[nr_a];
     t0      = X.rprm[nr_t0];
     vdc     = X.rprm[nr_vdc];
     omega   = X.rprm[nr_omega];
     phi_rad = X.rprm[nr_phi_rad];

     v0 = a*sin(omega*(G.time_given_e-t0)+phi_rad)+vdc;
   }
   if (G.flags[G.i_dc] || G.flags[G.i_trns] ) {
     cur_p = X.val_aux[na_cur_p];
     if (G.flags[G.i_function]) {
       X.f[nf_1] =  cur_p;
       X.f[nf_2] = -cur_p;
       X.f[nf_3] = X.val_nd[nnd_p]-X.val_nd[nnd_n]-v0;
     }
     if (G.flags[G.i_jacobian]) {
       J.dfdaux[nf_1][na_cur_p] =  1.0;
       J.dfdaux[nf_2][na_cur_p] = -1.0;
       J.dfdv  [nf_3][nnd_p   ] =  1.0;
       J.dfdv  [nf_3][nnd_n   ] = -1.0;
     }
   }
   if (G.flags[G.i_startup]) {
     cur_p_s = X.val_auxs[nas_cur_p_s];
     if (G.flags[G.i_function]) {
       X.h[nh_1] =  cur_p_s;
       X.h[nh_2] = -cur_p_s;
       X.h[nh_3] = X.val_nd[nnd_p]-X.val_nd[nnd_n]-v0;
     }
     if (G.flags[G.i_jacobian]) {
       J.dhdauxs[nh_1][nas_cur_p_s] =  1.0;
       J.dhdauxs[nh_2][nas_cur_p_s] = -1.0;
       J.dhdv   [nh_3][nnd_p      ] =  1.0;
       J.dhdv   [nh_3][nnd_n      ] = -1.0;
     }
   }
endC
endebe
