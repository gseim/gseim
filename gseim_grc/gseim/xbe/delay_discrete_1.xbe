# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
xbe name=delay_discrete_1 save_history=yes allow_ssw=no
+ delay=yes
#
# The input (x) is assumed to be a sampled quantity (or a function
# of sampled quantities). The output is a delayed version of the
# input. (delay of up to 3 periods is allowed)
#
Jacobian: variable
input_vars: x
output_vars: y
aux_vars:
iparms: n_delay=1 sampler_index=0
sparms:
rparms:
+  y_current=0
+  y_old_1=0
+  y_old_2=0
+  y_old_3=0
+  y_old_4=0
stparms: y_st=0
igparms:
outparms: x y
n_f= 0
n_g= 1
g_1: y
C:
prototypes:
variables:
   double y0;
   int n;
source:

   if (G.flags[G.i_one_time_parms]) {
     n_delay = X.iprm[ni_n_delay];
     if ((n_delay < 1) || (n_delay > 4)) {
       cout << "delay_discrete_1: n_delay must be 1, 2, or 3. Halting.." << endl;
       exit (1);
     }
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_x] = X.val_vr[nvr_x];
     X.outprm[no_y] = X.val_vr[nvr_y];
     return;
   }
   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_y] = 0.0;
     return;
   }
   if (G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = X.stprm[nst_y_st];
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y] - X.stprm[nst_y_st];
       }   
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }   
     }   
     return;
   }   
   if (G.flags[G.i_save_history]) {
     sampler_index = X.iprm[ni_sampler_index];

     if (G.sampler_flag[sampler_index] == 1) {
       X.rprm[nr_y_old_4] = X.rprm[nr_y_old_3];
       X.rprm[nr_y_old_3] = X.rprm[nr_y_old_2];
       X.rprm[nr_y_old_2] = X.rprm[nr_y_old_1];
       X.rprm[nr_y_old_1] = X.rprm[nr_y_current];

       X.rprm[nr_y_current] = X.val_vr[nvr_x];
     }
     return;
   }

   if (G.flags[G.i_trns]) {
     sampler_index = X.iprm[ni_sampler_index];

     n_delay = X.iprm[ni_n_delay];

     if (G.sampler_flag[sampler_index] == 1) {
       if (n_delay == 1) {
         y0 = X.rprm[nr_y_current];
       } else if (n_delay == 2) {
         y0 = X.rprm[nr_y_old_1];
       } else if (n_delay == 3) {
         y0 = X.rprm[nr_y_old_2];
       } else if (n_delay == 4) {
         y0 = X.rprm[nr_y_old_3];
       }
     } else {
       if (n_delay == 1) {
         y0 = X.rprm[nr_y_old_1];
       } else if (n_delay == 2) {
         y0 = X.rprm[nr_y_old_2];
       } else if (n_delay == 3) {
         y0 = X.rprm[nr_y_old_3];
       } else if (n_delay == 4) {
         y0 = X.rprm[nr_y_old_4];
       }
     }

     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = y0;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y] - y0;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }
     }
     return;
   }
endC
endxbe
