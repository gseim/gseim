# Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
# This file is part of GSEIM.
#
# GSEIM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
xbe name=monostable_1 evaluate=yes limit_tstep=yes save_history=yes allow_ssw=no
#
# when an active edge is detected at x, a pulse of width T is produced
# at the output.
#
Jacobian: variable
input_vars: x
output_vars: y
aux_vars:
iparms:
+  active_pos_edge=1
+  active_neg_edge=0
sparms:
rparms:
+  x_low=0
+  x_high=1
+  y_low=0
+  y_high=1
+  T=0.1
+  x_prev=0
+  t2=0
+  x_cross=0
+  epsl=0
+  epsl1=0
+  y_half=0
stparms:
igparms:
outparms: x y
n_f= 0
n_g= 1
g_1: y
C:
prototypes:
variables:
   int flag_active_edge;
   double time0,y0;
source:
   if (G.flags[G.i_one_time_parms]) {
     active_pos_edge = X.iprm[ni_active_pos_edge];
     active_neg_edge = X.iprm[ni_active_neg_edge];

     if (active_pos_edge == 0) {
       if (active_neg_edge == 0) {
         cout << "monostable_1.xbe: one of pos/neg edge must be 1. Halting..." << endl;
         exit(1);
       }
     } else {
       if (active_neg_edge != 0) {
         cout << "monostable_1.xbe: only one of pos/neg edge must be 1. Halting..." << endl;
         exit(1);
       }
     }
     x_low  = X.rprm[nr_x_low ];
     x_high = X.rprm[nr_x_high];
     y_low  = X.rprm[nr_y_low ];
     y_high = X.rprm[nr_y_high];
     T      = X.rprm[nr_T     ];

     if (x_low > x_high) {
       cout << "monostable_1.xbe: check x_low/x_high. Halting..." << endl;
       exit(1);
     }
     if (y_low > y_high) {
       cout << "monostable_1.xbe: check y_low/y_high. Halting..." << endl;
       exit(1);
     }

     x_cross = x_low + 0.5*(x_high-x_low);
     X.rprm[nr_x_cross] = x_cross;

     y_half = y_low + 0.5*(y_high-y_low);

     epsl = T/100.0;
     epsl1 = 1.1*epsl;

     X.rprm[nr_epsl  ] = epsl;
     X.rprm[nr_epsl1 ] = epsl1;
     X.rprm[nr_y_half] = y_half;

     X.rprm[nr_x_prev] = 0.0;
     X.rprm[nr_t2    ] = G.time_begin;
     return;
   }
   if (G.flags[G.i_outvar]) {
     X.outprm[no_x] = X.val_vr[nvr_x];
     X.outprm[no_y] = X.val_vr[nvr_y];
     return;
   }
   if (G.flags[G.i_init_guess]) {
     X.val_vr[nvr_y] = 0.0;
     return;
   }
   if (G.flags[G.i_save_history]) {
     time0 = G.time_given_x;
     active_pos_edge = X.iprm[ni_active_pos_edge];

     x_prev  = X.rprm[nr_x_prev ];
     x_cross = X.rprm[nr_x_cross];

     x = X.val_vr[nvr_x];

     if (active_pos_edge == 1) {
       if ((x_prev <= x_cross) && (x >= x_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     } else {
       if ((x_prev >= x_cross) && (x <= x_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     }

     if (flag_active_edge == 1) {
       if (X.val_vr[nvr_y] < X.rprm[nr_y_half]) {
         X.rprm[nr_t2] = time0 + X.rprm[nr_T];
       }
     }

     X.rprm[nr_x_prev] = x;

     return;
   }
   if (G.flags[G.i_next_time]) {
     time0 = G.time_given_x;
     t2 = X.rprm[nr_t2];

     active_pos_edge = X.iprm[ni_active_pos_edge];
     x_prev  = X.rprm[nr_x_prev ];
     x_cross = X.rprm[nr_x_cross];
     x = X.val_vr[nvr_x];

     if (active_pos_edge == 1) {
       if ((x_prev <= x_cross) && (x >= x_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     } else {
       if ((x_prev >= x_cross) && (x <= x_cross)) {
         flag_active_edge = 1;
       } else {
         flag_active_edge = 0;
       }
     }
     if (flag_active_edge == 1) {
       G.time_nextbreak_x = time0 + X.rprm[nr_epsl];
       return;
     }

     if (time0 < t2) {
       epsl  = X.rprm[nr_epsl ];
       epsl1 = X.rprm[nr_epsl1];

       if ((t2-time0) <= epsl1) {
         G.time_nextbreak_x = t2 + epsl;
       } else {
         G.time_nextbreak_x = t2 - epsl;
       }
     } else {
       G.time_nextbreak_x = G.time_end;
     }
     return;
   }
   if (G.flags[G.i_startup]) {
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = 0.0;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y];
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }
     }
     return;
   }
   if (G.flags[G.i_trns]) {
     t2 = X.rprm[nr_t2];
     time0 = G.time_given_x;

     if (time0 < t2) {
       y0 = X.rprm[nr_y_high];
     } else {
       y0 = X.rprm[nr_y_low];
     }
     if (G.flags[G.i_explicit]) {
       X.val_vr[nvr_y] = y0;
     } else if (G.flags[G.i_implicit]) {
       if (G.flags[G.i_function]) {
         X.g[ng_1] = X.val_vr[nvr_y] - y0;
       }
       if (G.flags[G.i_jacobian]) {
         J.dgdvr[ng_1][nvr_y] = 1.0;
       }
     }
   }
endC
endxbe
