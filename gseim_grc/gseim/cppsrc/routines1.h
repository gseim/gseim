/*
Copyright (C) 2022 - Mahesh Patil <mbpatil@ee.iitb.ac.in>
This file is part of GSEIM.

GSEIM is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#ifndef ROUTINES1_H
#define ROUTINES1_H

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstring>
#include <complex>
#include <math.h>
#include <iomanip>

using namespace std;

#include "global.h"
#include "ebelib.h"
#include "ebeusr.h"
#include "ebejac.h"
#include "xbelib.h"
#include "xbeusr.h"
#include "xbejac.h"
#include "solveblocks.h"
#include "circuit.h"
#include "sysmat.h"
#include "matgnrl1.h"
#include "utils.h"
#include "get_yyy.h"

#include "routines2.h"

void write_trns(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void write_dc_startup(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_x_exp(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SolveBlocks &slv,
   Circuit &cct,
   CctFile &cct_file,
   SysMat &smat,
   Global &global);
void solve_trns_x_feuler(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SolveBlocks &slv,
   Circuit &cct,
   CctFile &cct_file,
   SysMat &smat,
   Global &global);
void solve_trns_x_rk4(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SolveBlocks &slv,
   Circuit &cct,
   CctFile &cct_file,
   SysMat &smat,
   Global &global);
void solve_trns_x_rkf45(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SolveBlocks &slv,
   Circuit &cct,
   CctFile &cct_file,
   SysMat &smat,
   Global &global);
void solve_trns_x_bs23(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SolveBlocks &slv,
   Circuit &cct,
   CctFile &cct_file,
   SysMat &smat,
   Global &global);
void solve_trns_x_meuler(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SolveBlocks &slv,
   Circuit &cct,
   CctFile &cct_file,
   SysMat &smat,
   Global &global);
void solve_trns_x_heun(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SolveBlocks &slv,
   Circuit &cct,
   CctFile &cct_file,
   SysMat &smat,
   Global &global);
void xbe_feuler(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void xbe_feuler_al(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SolveBlocks &slv,
   SysMat &smat,
   Global &global);
void xbe_rk4(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void xbe_rk4_al(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SolveBlocks &slv,
   SysMat &smat,
   Global &global);
void xbe_rkf45(
   const int flag,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void xbe_rkf45_al(
   const int flag,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SolveBlocks &slv,
   SysMat &smat,
   Global &global);
void xbe_bs23(
   const int flag,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void xbe_bs23_al(
   const int flag,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SolveBlocks &slv,
   SysMat &smat,
   Global &global);
void xbe_meuler(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void xbe_meuler_al(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SolveBlocks &slv,
   SysMat &smat,
   Global &global);
void xbe_heun(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void xbe_heun_al(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SolveBlocks &slv,
   SysMat &smat,
   Global &global);
void xbe_evaluate(
   const int flag,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   Circuit &cct,
   Global &global);
void xbe_evaluate_1(
   const int flag,
   const int i_xbeu,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   Circuit &cct,
   Global &global);
void xbe_evaluate_2(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   Circuit &cct,
   Global &global);
void xbe_evaluate_al(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   Circuit &cct,
   Global &global);
void solve_trns_x_common(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SolveBlocks &slv,
   Circuit &cct,
   CctFile &cct_file,
   Global &global);
void update_rk4(
   const int stage,
   const double h1,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   Global &global);
void update_rk4_al(
   const int stage,
   const double h1,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   Global &global);
void update_rkf45(
   const int stage,
   const double h,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void update_rkf45_al(
   const int stage,
   const double h,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void update_bs23(
   const int stage,
   const double h,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void update_bs23_al(
   const int stage,
   const double h,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void update_meuler(
   const int stage,
   const double h1,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   Global &global);
void update_meuler_al(
   const int stage,
   const double h1,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   Global &global);
void update_heun(
   const int stage,
   const double h,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void update_heun_al(
   const int stage,
   const double h,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_dc(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_dc_linear_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_dc_nonlinear_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_startup(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_startup_e(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_startup_linear_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_startup_nonlinear_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_startup_x_exp(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_startup_x_imp(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_startup_linear_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_startup_nonlinear_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_startup_exc(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_startup_linear_exc(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_startup_nonlinear_exc(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_trns(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_e(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_e_be(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_e_trz(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_e_be_auto(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_e_trz_auto(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_e_trbdf2(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_linear_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_trns_nonlinear_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_trns_x_imp(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_x_be(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_x_trz(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_x_be_auto(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_x_trz_auto(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_x_trbdf2(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_linear_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_trns_nonlinear_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_trns_linear_x_al(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_trns_nonlinear_x_al(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_trns_exc(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_exc_be(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_exc_trz(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_exc_be_auto(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_exc_trz_auto(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_exc_trbdf2(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_trns_linear_exc(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_trns_nonlinear_exc(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_jac_1_e(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_2_e(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_1_x(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_2_x(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_1_ex(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_2_ex(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_1_ssw_e(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_2_ssw_e(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_3_ssw_e(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_1_ssw_ex(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_2_ssw_ex(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_3_ssw_ex(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_1_ssw_x(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_2_ssw_x(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac_3_ssw_x(
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void solve_jac(
   const int flag_copy_rhs,
   const int flag_copy_m,
   const int flag_call_gauss1,
   const int flag_call_gauss2,
   const int flag_gauss2,
   const bool flag_debug_gauss1,
   const bool flag_debug_gauss2,
   const double gauss_epsln,
   const double zero_piv,
   KnuthMat &m,
   KnuthMat &w,
   MatOp &mo,
   double *rhs_m,
   double *rhs_w,
   double *svec,
   double *svec_orig,
   Global &global);
void form_jac_rhs_dc_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void form_jac_rhs_startup_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void form_jac_rhs_startup_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void form_jac_rhs_startup_exc(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void form_jac_rhs_trns_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void form_jac_rhs_trns_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void form_jac_rhs_trns_x_al(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void form_jac_rhs_trns_exc(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void find_functions_trns_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void find_functions_trns_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void find_functions_trns_exc(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void find_ebe_cur_trns_e(
   bool flag_ebe_cur,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void find_ebe_cur_trns_ex(
   bool flag_ebe_cur,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void find_ebe_cur_ssw_trns_e(
   bool flag_ebe_cur,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void mat_dc_2_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void mat_dc_3_e(
   const int i_ebeu,
   const int i_ebel,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Global &global);
void mat_dc_3b_e(
   const int i_ebeu,
   const int i_ebel,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr);
void mat_startup_2_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void mat_startup_2_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void mat_startup_2_exc_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void mat_startup_2_exc_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void mat_startup_3_e(
   const int i_ebeu,
   const int i_ebel,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Global &global);
void mat_startup_3_x(
   const int i_xbeu,
   const int i_xbel,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Global &global);
void mat_startup_3_exc_e(
   const int i_ebeu,
   const int i_ebel,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Global &global);
void mat_startup_3_exc_x(
   const int i_xbeu,
   const int i_xbel,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Global &global);
void mat_startup_3b_e(
   const int i_ebeu,
   const int i_ebel,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr);
void mat_trns_2_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void mat_trns_2_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void mat_trns_2a_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void mat_trns_2a_exc_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void mat_trns_2_x_al(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void mat_trns_2_exc_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void mat_trns_2_exc_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void mat_trns_3_e(
   const int i_ebeu,
   const int i_ebel,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void mat_trns_3_x(
   const int i_xbeu,
   const int i_xbel,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Global &global);
void mat_trns_3_exc_e(
   const int i_ebeu,
   const int i_ebel,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   SolveBlocks &slv,
   Global &global);
void mat_trns_3_exc_x(
   const int i_xbeu,
   const int i_xbel,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Global &global);
void mat_trns_3a_x(
   const int i_xbeu,
   const int i_xbel,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   SysMat &smat);
void mat_trns_3a_exc_x(
   const int i_xbeu,
   const int i_xbel,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   SysMat &smat);
void mat_trns_3b_e(
   const int i_ebeu,
   const int i_ebel,
   SolveBlocks &slv,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr);
void mat_trns_3b_exc(
   const int i_ebeu,
   const int i_ebel,
   SolveBlocks &slv,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr);
void add_trns_terms_e(
   vector<EbeUsr> &ebe_usr,
   SysMat &smat,
   SolveBlocks &slv);
void add_trns_terms_x(
   vector<XbeUsr> &xbe_usr,
   SysMat &smat,
   SolveBlocks &slv);
void add_trns_terms_exc_e(
   vector<EbeUsr> &ebe_usr,
   SysMat &smat,
   SolveBlocks &slv);
void add_trns_terms_exc_x(
   vector<XbeUsr> &xbe_usr,
   SysMat &smat,
   SolveBlocks &slv);
void find_ebe_cur_stv_dc(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void find_ebe_cur_stv_startup(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   Global &global);
void ebe_init_func_jac_dc_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SysMat &smat);
void ebe_init_func_jac_startup_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SysMat &smat);
void ebe_init_func_jac_startup_exc_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SysMat &smat);
void xbe_init_jac_startup_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   SysMat &smat);
void xbe_init_jac_startup_exc_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   SysMat &smat);
void ebe_init_func_jac_trns_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SysMat &smat);
void ebe_init_func_jac_trns_exc_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SysMat &smat);
void xbe_init_jac_trns_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   SysMat &smat);
void xbe_init_jac_trns_exc_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   SysMat &smat);
void xbe_init_jac_ssw_trns_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   SysMat &smat);
void xbe_init_jac_ssw_trns_ex_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   Circuit &cct,
   SysMat &smat);
void ebe_init_func_trns_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SysMat &smat);
void ebe_init_func_trns_ex(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SysMat &smat);
void ebe_init_func_ssw_trns_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   Circuit &cct,
   SysMat &smat);
void solve_ssw(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_ssw_e(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_ssw_1_e(
   const bool l_write_1,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_ssw_1_ex(
   const bool l_write_1,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_ssw_1_x(
   const bool l_write_1,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_linear_ssw_e(
   const int i_statevar,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_linear_ssw_ex(
   const int i_statevar,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void solve_linear_ssw_x(
   const int i_statevar,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void add_ssw_terms_e(
   const int i_statevar,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void add_ssw_terms_ex(
   const int i_statevar,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void add_ssw_terms_x(
   const int i_statevar,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void find_functions_ssw_trns_e(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void find_functions_ssw_trns_ex(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void find_functions_ssw_trns_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void find_ssw_trz_1_e(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void find_ssw_trz_1_ex(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void find_ssw_trz_1_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void mat_ssw_3_e(
   const int i_ebeu,
   const int i_ebel,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void mat_ssw_3_ex_e(
   const int i_ebeu,
   const int i_ebel,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void mat_ssw_3_ex_x(
   const int i_xbeu,
   const int i_xbel,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void mat_ssw_trns_3_e(
   const int i_ebeu,
   const int i_ebel,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void mat_ssw_trns_3_ex_e(
   const int i_ebeu,
   const int i_ebel,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   Global &global);
void mat_ssw_trns_3_ex_x(
   const int i_xbeu,
   const int i_xbel,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Global &global);
void mat_ssw_trns_3_x(
   const int i_xbeu,
   const int i_xbel,
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Global &global);
void solve_ssw_trns_linear_e(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_ssw_trns_linear_ex(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_ssw_trns_linear_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_ssw_trns_newton_e(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_ssw_trns_newton_ex(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_ssw_trns_newton_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void form_jac_rhs_ssw_trns_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void form_jac_rhs_ssw_trns_ex(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void form_jac_rhs_ssw_trns_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void ebe_init_func_jac_ssw_trns_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void assign_kcl_ssw_trns_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   SysMat &smat,
   Circuit &cct);
void assign_kcl_ssw_trns_ex(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   SysMat &smat,
   Circuit &cct);
void add_ssw_trns_terms_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void add_ssw_trns_terms_ex(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void add_ssw_trns_terms_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_ssw_ex(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void solve_ssw_x(
   vector<XbeLib> &xbe_lib,
   vector<XbeUsr> &xbe_usr,
   vector<XbeJac> &xbe_jac,
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<EbeJac> &ebe_jac,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv,
   CctFile &cct_file,
   Global &global);
void trzbdf2_1_e(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv);
void trzbdf2_1_x(
   vector<XbeUsr> &xbe_usr,
   SysMat &smat,
   SolveBlocks &slv);
void trzbdf2_1_ex(
   vector<EbeLib> &ebe_lib,
   vector<EbeUsr> &ebe_usr,
   vector<XbeUsr> &xbe_usr,
   SysMat &smat,
   Circuit &cct,
   SolveBlocks &slv);

#endif
